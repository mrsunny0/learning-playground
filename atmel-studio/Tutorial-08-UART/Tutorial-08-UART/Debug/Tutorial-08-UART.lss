
Tutorial-08-UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fa  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000194  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 76 00 	call	0xec	; 0xec <main>
  8e:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
}

char receiveChar() {
	while(!(UCSR0A & (1<<RXC0))); // ready to accept a bit
	return UDR0; // note, it's the same bit that can be sent
}
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  9c:	e1 ec       	ldi	r30, 0xC1	; 193
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	80 83       	st	Z, r24
  ac:	a2 ec       	ldi	r26, 0xC2	; 194
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	8c 91       	ld	r24, X
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	8c 93       	st	X, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <sendChar>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <sendChar+0x4>
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  cc:	08 95       	ret

000000ce <sendString>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	31 f0       	breq	.+12     	; 0xe6 <sendString+0x18>
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	0e 94 5f 00 	call	0xbe	; 0xbe <sendChar>
  e0:	89 91       	ld	r24, Y+
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <sendString+0xe>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:
  ec:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
  f0:	78 94       	sei
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0xc>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x16>
 102:	00 00       	nop
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 67 00 	call	0xce	; 0xce <sendString>
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <sendChar>
 112:	ef cf       	rjmp	.-34     	; 0xf2 <main+0x6>

00000114 <__vector_18>:

// interrupt receive byte
ISR(USART_RX_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	sendChar(UDR0);
 136:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <sendChar>
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
