
Tutorial-04-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#include <avr/io.h>

void T1delay(void);

void setup() {
	DDRD |= (1<<PORTD7);
  80:	57 9a       	sbi	0x0a, 7	; 10
  82:	08 95       	ret

00000084 <T1delay>:
    }
}

void T1delay()
{
	TCCR1B |= (1<<CS10) | (1<<CS12); // pre-scale to 1024, look up datasheet for TCCR1B register
  84:	e1 e8       	ldi	r30, 0x81	; 129
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	80 83       	st	Z, r24
	
	// 15625 counts for 1 second, given 16 MHz and 65535 TCNT1 register holder
	// set prevalue, and wait for overflows
	TCNT1 = 65535 - 15625; // start count from 49910
  8e:	86 ef       	ldi	r24, 0xF6	; 246
  90:	92 ec       	ldi	r25, 0xC2	; 194
  92:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  96:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	// require interrupt flag for overflow checking
	// TIFR1 has a TOV (overflow) bit
	while( (TIFR1 & (1<<TOV1)) == 0) {
  9a:	b0 9b       	sbis	0x16, 0	; 22
  9c:	fe cf       	rjmp	.-4      	; 0x9a <T1delay+0x16>
		// wait
	}
	
	// reset timer
	TCNT1 = 0;
  9e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	// per the datasheet, this needs to be redefined, because it gets cleared during overflow, and needs to be manually changed
	TIFR1 = (1<<TOV1);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	86 bb       	out	0x16, r24	; 22
  aa:	08 95       	ret

000000ac <main>:
	DDRD |= (1<<PORTD7);
}

int main(void)
{
	setup();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	
    while (1) 
    {
		PORTD ^= (1<<PORTD7);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 58       	subi	r24, 0x80	; 128
  b4:	8b b9       	out	0x0b, r24	; 11
		T1delay();
  b6:	0e 94 42 00 	call	0x84	; 0x84 <T1delay>
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <main+0x4>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
