
Tutorial-07-PWM-interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079f  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f6  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  0000182b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enableInterrupt>:

/************************************************************************/
/* enable interrupt for Int0 */
/************************************************************************/
void enableInterrupt() {
	EICRA |= (1<<ISC01); // condition on interrupt firing
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); // turn on interrupts
  9a:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
  9c:	78 94       	sei
  9e:	08 95       	ret

000000a0 <enableTimer>:
}

void enableTimer() {
	TCCR0A |= (1<<WGM00) | (1<<WGM01); // enable timer0, in fast PWM mode
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1); // counter in non-inverting mode, this sets the comparison, output compare
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00); // pre-scalers, none
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bd       	out	0x25, r24	; 37
  b2:	08 95       	ret

000000b4 <setup>:

/************************************************************************/
/* setup */
/************************************************************************/
void setup() {
	DDRD &= ~(1<<PORTD2); // input interrupt pin
  b4:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2); // enable pull-up resistor
  b6:	5a 9a       	sbi	0x0b, 2	; 11
	DDRD |= (1<<PORTD6); // output LED pin
  b8:	56 9a       	sbi	0x0a, 6	; 10
  ba:	08 95       	ret

000000bc <main>:
/************************************************************************/
/* main */
/************************************************************************/
int main(void)
{
	setup();
  bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <setup>
	enableTimer();
  c0:	0e 94 50 00 	call	0xa0	; 0xa0 <enableTimer>
	enableInterrupt();
  c4:	0e 94 48 00 	call	0x90	; 0x90 <enableInterrupt>
    while (1) 
    {
		OCR0A = brightness;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	87 bd       	out	0x27, r24	; 39
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <main+0xc>

000000d0 <__vector_1>:
}

/************************************************************************/
/* interrupts */
/************************************************************************/
ISR(INT0_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 ec       	ldi	r24, 0xC9	; 201
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_1+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_1+0x20>
  f0:	00 00       	nop
	// de-bounce delay
	_delay_ms(180); 
	
	// check if pin is LOW
	if ( ~(PORTD & (1<<PORTD2)) ) {
  f2:	8b b1       	in	r24, 0x0b	; 11
		if (counter % 2) {
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
  f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <counter+0x1>
  fc:	80 ff       	sbrs	r24, 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__vector_1+0x38>
			brightness = 10;
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 106:	03 c0       	rjmp	.+6      	; 0x10e <__vector_1+0x3e>
		} else {
			brightness = 250;
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
	}
	
	// increment counter
	counter++;
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
 112:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <counter+0x1>
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <counter+0x1>
 11c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
